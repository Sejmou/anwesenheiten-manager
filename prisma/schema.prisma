// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  firstName     String
  lastName      String
  email         String?       @unique
  passwordHash  String?
  emailVerified DateTime?
  createdAt     DateTime      @default(now())
  image         String?
  accounts      Account[]
  sessions      Session[]
  InviteToken   InviteToken?
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InviteToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
  expires   DateTime?
  usedAt    DateTime?
  userId    String?   @unique @map("user_id")
  usedBy    User?     @relation(fields: [userId], references: [id])
}

model Singer {
  id            String        @id @default(cuid())
  firstName     String
  lastName      String
  email         String?       @unique
  createdAt     DateTime      @default(now())
  voiceGroup    VoiceGroup
  attendances   EventAttendance[]
}

enum VoiceGroup {
  S1
  S2
  S2_M
  A1_M
  A1
  A2
  T1
  T2
  B1
  B2
  D
}

model Event {
  id            String        @id
  summary       String
  description   String?
  location      String?
  lastSyncAt    DateTime
  start         DateTime
  end           DateTime
  attendances   EventAttendance[]
}

model EventAttendance {
  @@id([singerId, eventId])
  singer    Singer    @relation(fields: [singerId], references: [id])
  event     Event     @relation(fields: [eventId], references: [id])
  singerId  String
  eventId   String
}