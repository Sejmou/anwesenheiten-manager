generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  firstName     String
  lastName      String
  email         String?      @unique
  passwordHash  String?
  emailVerified DateTime?
  createdAt     DateTime     @default(now())
  image         String?
  accounts      Account[]
  InviteToken   InviteToken?
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InviteToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
  expires   DateTime?
  usedAt    DateTime?
  userId    String?   @unique @map("user_id")
  usedBy    User?     @relation(fields: [userId], references: [id])
}

model Singer {
  id          String            @id @default(cuid())
  firstName   String
  lastName    String
  email       String?           @unique
  createdAt   DateTime          @default(now())
  voiceGroup  VoiceGroup
  attendances EventAttendance[]
}

model Event {
  id          String            @id
  summary     String
  description String?
  location    String?
  lastSyncAt  DateTime
  start       DateTime
  end         DateTime
  attendances EventAttendance[]
}

model EventAttendance {
  singerId String
  eventId  String
  event    Event  @relation(fields: [eventId], references: [id])
  singer   Singer @relation(fields: [singerId], references: [id])

  @@id([singerId, eventId])
}

model Song {
  id             String            @id @default(cuid())
  created_at     DateTime?         @default(now()) @db.Timestamptz(6)
  title          String            @unique
  key            musicalkey?
  description    String?
  files          SongFile[]
  setlistEntries SetlistSongInfo[]
}

model Setlist {
  id          String            @id @default(cuid())
  created_at  DateTime?         @default(now()) @db.Timestamptz(6)
  title       String?
  description String?
  entries     SetlistSongInfo[]
}

model SetlistSongInfo {
  id         String    @id @default(cuid())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  setlist_id String
  song_id    String
  order      Int
  notes      String?
  Song       Song      @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Setlist    Setlist   @relation(fields: [setlist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([setlist_id, song_id, order], name: "setlistEntryId")
}

model SongFile {
  id         String    @id @default(cuid())
  song_id    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  type       linktype?
  name       String?
  url        String?
  Song       Song?     @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum VoiceGroup {
  S1
  S2
  S2_M
  A1_M
  A1
  A2
  T1
  T2
  B1
  B2
  D
}

enum linktype {
  audio
  video
  pdf
  musescore
}

enum musicalkey {
  C
  C_ @map("C#")
  Db
  D
  D_ @map("D#")
  Eb
  E
  F
  F_ @map("F#")
  Gb
  G
  G_ @map("G#")
  Ab
  A
  A_ @map("A#")
  Bb
  B
}
